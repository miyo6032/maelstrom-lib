/**
 * Building. Most of my mods use this library as a dependency for building as a composite build. Gradle does not make this
 * easy unfortunately. Here are the general steps.
 *
 * You want the dependent mod repo and this library mod repo side by side.
 *
 * Next, we want to run "gradlew build publishToMavenLocal" to push a temporary artifact that we'll use later.
 *
 * Next, in the dependent mod settings.gradle file, comment the "includeBuild" line and refresh the gradle. It should
 * use the mavenLocal repo and pull down the artifact.
 *
 * The uncomment the "includeBuild" line, and the gradle should successfully build.
 *
 * Now here comes the jenky part. You can now run the game environment, but the classes associated with the library may
 * not be linked in the debugger (e.g. you can't use breakpoint or hot reload code from the library). To fix this I have
 * a few suggestions.
 *
 * First, if the project uses IDEA instead of gradle to run and compile (you can check under gradle settings), you may
 * have to link the library project instead of uncommenting the "includeBuild" in the gradle file.
 *
 * If you use gradle as the default instead, I think it will work fine to have "includeBuild"
 *
 * Next, you have to go to project structure and make sure that the main module in the dependent mod has a the main
 * module of the library included as a dependency. I think this is what makes IDEA know to use the source files.
 *
 * After this. hopefully you should be able to hot reload and use debugging as normal, but I'm not quite sure if there
 * are any limitations.
 *
 * If the junit test cases come up with "no tests found", we solved it by clearing the gradle
 * cache user\.gradle\caches\modules-2\files-2.1
 */

plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

test {
    useJUnitPlatform()
}

repositories {
    maven { url = "http://maven.fabricmc.net/" }
    mavenCentral()
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
    testImplementation(
            'org.assertj:assertj-core:3.12.2',
            'org.junit.jupiter:junit-jupiter-api:5.4.2'
    )
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.4.2')
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
//         mavenLocal()
    }
}

compileKotlin.kotlinOptions.jvmTarget = "1.8"